const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const moment = require('moment');
const bodyParser = require('body-parser');
const mysql = require('mysql2'); // Still needed for direct queries in app.js

// Import the logPickedObject function from dbHelper.js
const { logPickedObject } = require('./dbhelper'); // Adjust the path as needed

// Set up Express and Socket.io
const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// MySQL connection configuration (needed for queries like fetching objects)
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '', // Default XAMPP password for MySQL is empty
  database: 'countdown_db'
});

// Connect to MySQL
db.connect(err => {
  if (err) {
    console.error('MySQL connection error:', err);
    process.exit(1);
  }
  console.log('Connected to MySQL using XAMPP');
});

// Middleware for parsing JSON bodies
app.use(bodyParser.json());

// Timer configuration
const TIMER_DURATION = 120000; // 2 minutes in milliseconds
let timerEndTime = moment().add(TIMER_DURATION, 'milliseconds');
let adminSelectedObject = null;

// Serve static files
app.use(express.static(__dirname + '/public'));

// Endpoint to get the remaining time
app.get('/time', (req, res) => {
  const remainingTime = Math.max(0, timerEndTime.diff(moment()));
  res.json({ remainingTime });
});

// Endpoint for admin to submit selected object
app.post('/admin/submit', (req, res) => {
  const { number, color } = req.body;
  if (number && color) {
    adminSelectedObject = { number: parseInt(number), color };
    res.sendStatus(200);
  } else {
    res.sendStatus(400);
  }
});

// Socket connection
io.on('connection', (socket) => {
  console.log('A user connected');

  // Send the remaining time to the newly connected client
  const remainingTime = Math.max(0, timerEndTime.diff(moment()));
  socket.emit('updateTimer', remainingTime);

  socket.on('disconnect', () => {
    console.log('A user disconnected');
  });
});

// Timer logic
function resetTimer() {
  timerEndTime = moment().add(TIMER_DURATION, 'milliseconds');
  pickRandomOrAdminObject();
}

function pickRandomOrAdminObject() {
  // If admin selected an object, use that
  if (adminSelectedObject) {
    logPickedObject(adminSelectedObject); // Use the imported function from dbHelper.js
    adminSelectedObject = null; // Clear the selection for the next cycle
  } else {
    // Fetch all objects from the database
    db.query('SELECT * FROM objects', (err, results) => {
      if (err) throw err;

      // Pick a random object from the results
      const randomObject = results[Math.floor(Math.random() * results.length)];
      logPickedObject(randomObject); // Use the imported function from dbHelper.js
    });
  }
}

// Timer check and update logic
function checkAndUpdateClients() {
  const remainingTime = Math.max(0, timerEndTime.diff(moment()));
  io.emit('updateTimer', remainingTime);

  if (remainingTime <= 0) {
    // Reset the timer when it hits zero
    resetTimer();
  }
}

// Set an interval to update clients every second
setInterval(checkAndUpdateClients, 1000);

// Start the server
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});



eyJhbGciOiJSUzI1NiIsImtpZCI6IjcxOGY0ZGY5MmFkMTc1ZjZhMDMwN2FiNjVkOGY2N2YwNTRmYTFlNWYiLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoiUG9sanlvdGkgU29ub3dhbCIsImlzcyI6Imh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS9leGEyLWZiMTcwIiwiYXVkIjoiZXhhMi1mYjE3MCIsImF1dGhfdGltZSI6MTcyOTc3NzIzNCwidXNlcl9pZCI6InVsZlVzVVJ4UDRnRWVOa3BWVHY0QkhlelVuWTIiLCJzdWIiOiJ1bGZVc1VSeFA0Z0VlTmtwVlR2NEJIZXpVblkyIiwiaWF0IjoxNzI5Nzc4MTY1LCJleHAiOjE3Mjk3ODE3NjUsImVtYWlsIjoicG9sc2tzb25vd2FsNjEzQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiZmlyZWJhc2UiOnsiaWRlbnRpdGllcyI6eyJlbWFpbCI6WyJwb2xza3Nvbm93YWw2MTNAZ21haWwuY29tIl19LCJzaWduX2luX3Byb3ZpZGVyIjoicGFzc3dvcmQifX0.8NNF55LFDkYjVNeslJNypiZXONWWjGizNO7fZTXiTZDCHuc9Vc4zbdlR38jgXPW3kbJAf6dqsCxJKzbBM_VrORSsH_P5i9OXxVZsH0ib3X6aQO5SU7HHY171w47N0eEi50ZjSpa9ql-XM_5WvffXD8guhfUyCeHwBMYRcNy2S2THeX8NM14KbSvXnU0k8pww11ge648m1Fbjibqzu_fdWXaGZFfKmFw9S_ua35HOFcpSi6KmMkaYrVOCL27UU3LSblyYpVdJrU0fc6FXdB40faVZTXqNxhLMteM8qjLze0N7oftJGtlCUZC8a_HtVpL2KcVBu8NYNWcKPaSOE5xjiQ